//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18408
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Reflection;
public class StoreBase
{
	static Dictionary<Type,StoreBase> Serializers = new Dictionary<Type, StoreBase>()
	{
		{typeof(int),new StoreInt()},
		{typeof(float), new StoreFloat()},
		{typeof(string), new StoreString()}

	};

	static StoreBase EnumSerializer = new StoreEnum();

	protected virtual string Save(object obj)
	{
		return obj.ToString();
	}
	protected virtual object Load(string val)
	{
		return val;
	}

	public static string SaveField(FieldInfo field, object o)
	{

		if(field.FieldType.IsEnum)
			return EnumSerializer.Save(field.GetValue(o));

		if(Serializers.ContainsKey(field.FieldType))
			return Serializers[field.FieldType].Save(field.GetValue(o));
		return "";
	}

	public static void LoadField(FieldInfo f, object o, string val)
	{
		if(f.FieldType.IsEnum)
			f.SetValue(o,EnumSerializer.Load(val));
		else if(Serializers.ContainsKey(f.FieldType))
			f.SetValue(o,Serializers[f.FieldType].Load(val));
	}

	public static string SaveProperty(PropertyInfo p, object o)
	{

		if(Serializers.ContainsKey(p.PropertyType))
			return Serializers[p.PropertyType].Save(p.GetValue(o,null));
		return "";
	}
	
	public static void LoadProperty(PropertyInfo p, object o, string val)
	{
		if(Serializers.ContainsKey(p.PropertyType))
			p.SetValue(o,Serializers[p.PropertyType].Load(val),null);
	}
}

public class StoreString : StoreBase{

}

public class StoreInt : StoreBase
{
	#region implemented abstract members of StoreBase

	protected override object Load ( string val)
	{
		return Convert.ToInt32(val);
	}

	#endregion
}

public class StoreFloat : StoreBase
{
	#region implemented abstract members of StoreBase

	protected override object Load ( string val)
	{
		return float.Parse(val);
	}
	
	#endregion
}


public class StoreEnum : StoreBase
{
	protected override object Load (string val)
	{
		int pos = val.LastIndexOf(' ');
		String typeName = val.Substring(0,pos);

		String valName = val.Substring(pos+1,val.Length-pos-1);

		Type t = Type.GetType(typeName);
		return Enum.Parse(t,valName);

	}

	protected override string Save (object obj)
	{
		return obj.GetType().AssemblyQualifiedName+" "+Enum.GetName(obj.GetType(),obj);
	}
}
